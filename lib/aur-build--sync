#!/bin/bash
# shellcheck disable=SC2086
# build--sync - helper for upgrading local repository
set -o errexit
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=build--sync
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
conf_args=() sync_args=() refresh=0 sysupgrade=0

args_csv() {
    # shellcheck disable=SC2155
    local str=$(printf '%s,' "$@")
    printf '%s' "${str%,}"
}

get_local_config() {
    printf '[options]\n'
    pacconf "${conf_args[@]}" --options --raw

    local repo
    for repo in "$@"; do
        printf '[%s]\n' "$repo"
        pacconf "${conf_args[@]}" --repo="$repo" --raw
    done
}

# option parsing
opt_short='d:inuy'
opt_long=('database:' 'config:' 'refresh' 'sysupgrade' 'install' 'noconfirm' 'asdeps')

if opts=$(getopt -o "$opt_short" -l "$(args_csv "${opt_long[@]}")" -n "$argv0" -- "$@"); then
    eval set -- "$opts"
else
    printf >&2 'usage: %s [-n] [-d repo]\n' "$argv0"
    exit 1
fi

unset db_names
while true; do
    case "$1" in
        -d|--database)
            shift; db_names+=("$1") ;;
        -y|--refresh)
            refresh=1 ;;
        -u|--sysupgrade)
            sync_args+=(--sysupgrade --resolve-replacements=none) ;;
        -i|--install)
            sync_args+=(--install) ;;
        -n|--noconfirm)
            sync_args+=(--no-confirm) ;;
        --asdeps)
            sync_args+=(--as-deps) ;;
        --config)
            shift; conf_args+=(--config "$1") ;;        
        --) shift; break ;;
    esac
    shift
done

if (( refresh )); then
    pacsync "${conf_args[@]}" "${db_names[@]}"
    pacsync "${conf_args[@]}" "${db_names[@]}" --dbext=.files
fi

if (( ${#db_names[@]} )); then
    pactrans "${sync_args[@]}" --config <(get_local_config "${db_names[@]}") "$@"
    wait "$!"
else
    pactrans "${sync_args[@]}" "$@"
fi

# vim: set et sw=4 sts=4 ft=sh:
